{{ if and (and (eq (include "performDeployment" .) "true") (eq (include "isMigrationInit" .) "true"))
   (eq (include "isClusteringServiceEnabled" .) "true") }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "clusteringServiceName" . }}-migration-job
  namespace: {{ .Release.Namespace }}
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "clusteringServiceName" . }}-migration-job
    spec:
      serviceAccountName: {{ template "clusteringServiceName" . }}-migration-sa
      containers:
        - name: migration-job
          image: {{ .Values.migration.migrationJobImage }}
          command:
            - bin/bash
            - -c
            - |
              {{ range $index, $dep := .Values.global.tier}}
              {{ if (eq $index 0) }}
              labelName="pega-{{ $dep.name }}"
              {{ end }}
              {{ end }}
              podname="$(kubectl get pod -l app=$labelName -n {{ .Release.Namespace }} -o json | jq -r '.items[0].metadata.name')"
              kubectl -n {{ .Release.Namespace }} exec $podname -- curl -XPOST -H "Content-type: application/json" -d '{
                "content": {
                	"SERVER_HOSTNAME": "{{ template "clusteringServiceName" . }}-service.{{ .Release.Namespace }}.svc.cluster.local",
                	"CLUSTER_NAME": "{{ .Values.server.clustering_service_group_name }}",
                    "HZ_USERNAME": "{{ .Values.username }}",
                    "HZ_PASSWORD": "{{ .Values.password }}",
                	"CLIENT_MODE_ENABLED": "true",
                	"HZONK8S": "true"
                }
                       }' 'http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/client-server/configurations'
              echo "DSS added successfully..."
              mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              echo "Migration Status :: '$mig_status'"

              # Init Step
              echo "Status Before Init :: '$mig_status'"
              if  [ $mig_status == 'NOT_STARTED' ] || [ $mig_status == 'INITIALIZATION_FAILED' ] ; then
                 echo "Initializing v5 client..."
                 actions=$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl -X POST http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/cluster/latest/startup)
                 sleep 10
                 mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              fi

              while  [  $mig_status == 'INITIALIZATION_IN_PROGRESS' ]
              do
                 sleep 30
              	  mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              done

              if  [ $mig_status == 'INITIALIZATION_FAILED' ] ; then
                 echo "V5 initialization failed..."
                 exit 1
              fi

              # Migration Step
              echo "Status Before Migration Start :: '$mig_status'"
              if  [  $mig_status == 'INITIALIZATION_COMPLETED' ] || [  $mig_status == 'MIGRATION_FAILED' ] ; then
                 actions=$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl -X POST http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/migration/initiate)
                 sleep 10
                 mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              fi

              while  [  $mig_status == 'MIGRATION_IN_PROGRESS' ]
              do
                 sleep 10
                 mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              done

              if [ $mig_status == 'MIGRATION_FAILED' ] ; then
                 echo "Migration failed..."
                 exit 1
              fi

              # Shutdown Step
              echo "Status Before v4 shutdown :: '$mig_status'"
              if  [  $mig_status == 'MIGRATION_COMPLETED' ] || [  $mig_status == 'SHUTDOWN_FAILED' ] ; then
                 actions=$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl -X POST http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/cluster/old/shutdown)
                 sleep 10
                 mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              fi

              while  [  $mig_status == 'SHUTDOWN_IN_PROGRESS' ]
              do
                 sleep 30
                 mig_status="$(kubectl -n {{ .Release.Namespace }} exec $podname -- curl http://localhost:8080/prweb/api/CloudRemoteAPI/v1/pzcluster/hazelcast-v5-upgrade/status)"
              done
              if [ $mig_status == 'SHUTDOWN_FAILED' ] ; then
                 echo "Shutdown failed..."
                 exit 1
              fi
              echo "Status :: '$mig_status'"
              exit
      restartPolicy: Never

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "clusteringServiceName" . }}-migration-sa
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "clusteringServiceName" . }}-migration-role
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "clusteringServiceName" . }}-migration-role-binding
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: {{ template "clusteringServiceName" . }}-migration-sa
roleRef:
  kind: Role
  name: {{ template "clusteringServiceName" . }}-migration-role
  apiGroup: rbac.authorization.k8s.io
{{ end }}
